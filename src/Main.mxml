<?xml version="1.0" encoding="utf-8"?>
<local:MainBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:aoi="http://www.aoi.moe/"
				xmlns:local="*"
				xmlns:components="components.*"
				xmlns:models="models.*"
				
				title="0133训练机"
				width="560"
				height="360"
				skinClass="skins.MainSkin"
				showStatusBar="false"
				applicationComplete="applicationCompleteHandler(event)">
	
	<fx:Style source="css/Main.css"/>
	
	<!---
		BMS 转换流程
		1. 收集各个 BMSPack。
		2. 加载各个 BMSPack。
		3. 其中，收集各个 BMS。
		4. 加载各个 BMS，并关联 wav 和 bmp。
		5. 整理 BMSPack 里关联的 wav 和 bmp。
		6. 转换各个 BMS。
		7. 复制各个 wav 和 bmp。
	-->
	<fx:Script aoi:section="model">
		<![CDATA[
			import flash.net.registerClassAlias;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.validators.Validator;
			
			import spark.components.Alert;
			
			import components.ProgressTitleWindow;
			
			public static var current:Main;
			
			[Embed(source="workerswfs/BackgroundWorker.swf", mimeType="application/octet-stream")]
			private static const WORKER:Class;
			
			private var file:File = new File();
			
			private var progressTitleWindow:ProgressTitleWindow = new ProgressTitleWindow();
			
			//☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
			//  Worker
			//☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆

			private var bWorker:Worker;
			
			private var m2bChannel:MessageChannel;
			private var b2mChannel:MessageChannel;
			
			registerClassAlias('flash.filesystem.File', File);
			/**
			 * @see BackgroundWorker#applicationDirectory
			 */
			private function createBackgroundWorker():void
			{
				bWorker = WorkerDomain.current.createWorker(new WORKER(), true);
				
				m2bChannel = Worker.current.createMessageChannel(bWorker);
				b2mChannel = bWorker.createMessageChannel(Worker.current);
				b2mChannel.addEventListener(Event.CHANNEL_MESSAGE, onB2MChannelMessage);
				
				bWorker.setSharedProperty('m2bChannel', m2bChannel);
				bWorker.setSharedProperty('b2mChannel', b2mChannel);
				bWorker.setSharedProperty('applicationDirectory', new File(File.applicationDirectory.nativePath));
				
				bWorker.start();
			}
			
			/**
			 * 修复 NumericStepper 在 value 为整数时以小数显示的问题。
			 * 但是它虽然显示小数，也不会影响到 OSUPrinter，它打印出的还是整数。
			 */
			protected function stepper_formatFunc(value:Number):String
			{
				const intager:uint = uint(value);
				return value == intager ?
					intager.toString() :
					value.toString();
			}
			
			// TODO: 把选择编码UI补上。还有去BMS2OSUConverter里把+1K的判断搞下，再来这补UI。
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<models:Config id="config"/>
		
		<s:ArrayList id="encodings">
			<fx:String>shift_jis</fx:String>
			<fx:String>gb18030</fx:String>
			<fx:String>utf8</fx:String>
		</s:ArrayList>
		
		<s:ArrayList id="scratchTypes">
			<fx:String>是</fx:String>
			<fx:String>否</fx:String>
		</s:ArrayList>
		
		<s:ArrayList id="hitSoundTypes">
			<fx:String>有</fx:String>
			<fx:String>无</fx:String>
		</s:ArrayList>
		
		<fx:Array id="validators">
			<mx:StringValidator source="{bmsDirInput}" property="text" required="true"/>
			<mx:StringValidator source="{outputDirInput}" property="text" required="true"/>
		</fx:Array>
		
	</fx:Declarations>
	
	<local:states>
		<s:State name="default"/>
		<s:State name="converting"/>
	</local:states>
	
	<s:Form id="form" horizontalCenter="0" verticalCenter="0" defaultButton="{submitButton}">
		<s:FormItem label="BMS 文件夹：" width="100%" required="true">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:TextInput id="bmsDirInput" text="@{config.bmsDirStr}"/>
			<s:Button label="选择"
					  click="selectBMSBtn_clickHandler(event)"/>
		</s:FormItem>
		
		<s:FormItem label="输出文件夹：" width="100%" required="true">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:TextInput id="outputDirInput" text="@{config.outputDirStr}"/>
			<s:Button label="选择"
					  click="selectOutputBtn_clickHandler(event)"/>
		</s:FormItem>
		
		<s:FormItem label="编码：" width="100%">
			<s:ComboBox selectedItem="@{config.encoding}"
						dataProvider="{encodings}"/>
		</s:FormItem>
		
		<s:FormItem label="OD：" width="100%">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle"/>
			</s:layout>
			<s:HSlider value="@{config.OD}" snapInterval="0.1" dataTipPrecision="1"/>
			<s:NumericStepper value="@{config.OD}" snapInterval="0.1" stepSize="0.1" valueFormatFunction="stepper_formatFunc"/>
		</s:FormItem>
		
		<s:FormItem label="HP：" width="100%">
			<s:layout>
				<s:HorizontalLayout verticalAlign="middle"/>
			</s:layout>
			<s:HSlider value="@{config.HP}" snapInterval="0.1" dataTipPrecision="1"/>
			<s:NumericStepper value="@{config.HP}" snapInterval="0.1" stepSize="0.1" valueFormatFunction="stepper_formatFunc"/>
		</s:FormItem>
		
		<s:FormItem label="是否附加7k无皿谱：" width="100%">
			<s:DropDownList selectedItem="@{config.addNoScratch}"
							dataProvider="{scratchTypes}"/>
		</s:FormItem>
		
		<s:FormItem label="默认击打音效：" width="100%">
			<s:helpContent>
				<s:Label text="无 Key 音谱会附加击打音效"/>
			</s:helpContent>
			<s:DropDownList selectedItem="@{config.hitSoundType}"
							dataProvider="{hitSoundTypes}"/>
		</s:FormItem>
		
		<s:FormItem label="默认击打音效音量：" width="100%">
			<s:NumericStepper minimum="0" maximum="100" value="@{config.volume}"/>
		</s:FormItem>
		
		<s:FormItem>
			<s:Button id="submitButton" label="训练" click="convertBtn_clickHandler(event)"/>
		</s:FormItem>
	</s:Form>
	
	<fx:Script aoi:section="controller">
		<![CDATA[
			
			//☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
			//  Application
			//☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
			
			protected function applicationCompleteHandler(event:FlexEvent):void
			{
				current = this;
				
				createBackgroundWorker();
			}
			
			//☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
			//  Worker
			//☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
			
			private function onB2MChannelMessage(event:Event):void
			{
				if (!b2mChannel.messageAvailable)
					return;
				
				const msg:String = b2mChannel.receive(true);
				
				if (msg in this)
				{
					this[msg]();
				}
				else switch (msg)
				{
					case BackgroundWorker.HEAD_BMS_PROGRESS:
						progressTitleWindow.setBMSProgress.apply(null, b2mChannel.receive(true));
						break;
					
					case BackgroundWorker.HEAD_BMSPACK_PROGRESS:
						progressTitleWindow.setBMSPackProgress.apply(null, b2mChannel.receive(true));
						break;
					
					default:
						throw new Error('未知的消息：' + msg);
				}
			}
			
			//☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
			//  Meassage
			//☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
			
			public function collecting():void
			{
				progressTitleWindow.currentState = 'collecting_bmsPacks';
			}
			
			public function arranging():void
			{
				progressTitleWindow.currentState = 'arranging';
			}
			
			/**
			 * 这儿的函数全用 public，以便 this[msg](); 能方便调用。
			 */
			public function not_found():void
			{
				Alert.show('然而你选的 BMS 文件夹中并没有找到 BMS', 'あれ？', Alert.OK, null, ok);
				
				function ok():void
				{
					PopUpManager.removePopUp(progressTitleWindow);
				}
			}
			
			public function cancel():void
			{
				PopUpManager.removePopUp(progressTitleWindow);
			}
			
			public function complete():void
			{
				Alert.show('BMS 已经全部转换完毕！', 'やっっったぁぁぁぁぁ！', Alert.OK, null, ok);
				
				function ok():void
				{
					PopUpManager.removePopUp(progressTitleWindow);
				}
			}
			
			//☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
			//  Directory
			//☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆
			
			protected function selectBMSBtn_clickHandler(event:MouseEvent):void
			{
				file.addEventListener(Event.SELECT, bmsDir_selectHandler);
				file.browseForDirectory('选择 BMS 文件夹');
			}
			
			protected function selectOutputBtn_clickHandler(event:MouseEvent):void
			{
				file.addEventListener(Event.SELECT, outputDir_selectHandler);
				file.browseForDirectory('选择输出文件夹');
			}
			
			protected function bmsDir_selectHandler(event:Event):void
			{
				file.removeEventListener(Event.SELECT, arguments.callee);
				
				config.bmsDirStr = decodeURIComponent(file.url);
			}
			
			protected function outputDir_selectHandler(event:Event):void
			{
				file.removeEventListener(Event.SELECT, arguments.callee);
				
				config.outputDirStr = decodeURIComponent(file.url);
			}
			
			registerClassAlias('models.Config', Config);
			protected function convertBtn_clickHandler(event:MouseEvent):void
			{
				const res:Array = Validator.validateAll(validators);
				if (res.length != 0)
					return;
				
				currentState = 'converting';
				
				PopUpManager.addPopUp(progressTitleWindow, this, true);
				PopUpManager.centerPopUp(progressTitleWindow);
				
				m2bChannel.send(BackgroundWorker.HEAD_START);
				m2bChannel.send(config);
			}
			
		]]>
	</fx:Script>
	
</local:MainBase>

